services:
  # Base de Datos PostgreSQL para servicio de Usuarios
  users-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${USERS_DB}
    ports:
      - "5436:5432"
    volumes:
      - users-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Base de Datos PostgreSQL para servicio de Admins
  admins-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${ADMINS_DB}
    ports:
      - "5434:5432"
    volumes:
      - admins-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Base de Datos PostgreSQL para servicio de Clientes
  clients-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${CLIENTS_DB}
    ports:
      - "5435:5432"
    volumes:
      - clients-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Servicio de Usuario (Express)
  users-service:
    build: ./servicio_usuarios
    volumes:
      - ./servicio_usuarios/src:/app/src
    ports:
      - "3001:3000" # Exponer el puerto 3000 para el desarrollo en Express
      - "50051:50051"   # gRPC se ve fuera como 50051 (opcional, si lo quieres exponer host->container)
    env_file:
      - .env
    environment:
      CHOKIDAR_USEPOLLING: true
      NODE_ENV: development
      DATABASE_HOST: users-db
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${USERS_DB}
      DATABASE_PORT: 5432
    depends_on:
      - users-db
    networks:
      - app-network
    restart: on-failure

  # Servicio de Admin (Express)
  admins-service:
    build: ./servicio_admin
    volumes:
      - ./servicio_admin/src:/app/src
    ports:
      - "3002:3000" # Exponer el puerto 3000 para el desarrollo en Express
      - "50052:50052"   # gRPC se ve fuera como 50052 (opcional, si lo quieres exponer host->container)
    env_file:
      - .env
    environment:
      CHOKIDAR_USEPOLLING: true
      NODE_ENV: development
      DATABASE_HOST: admins-db
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${ADMINS_DB}
      DATABASE_PORT: 5432
    depends_on:
      - admins-db
    networks:
      - app-network
    restart: on-failure

  # Servicio de Clientes (Express)
  clients-service:
    build: ./servicio_clientes
    volumes:
      - ./servicio_clientes/src:/app/src
    ports:
      - "3003:3000" # Exponer el puerto 3000 para el desarrollo en Express
    env_file:
      - .env
    environment:
      CHOKIDAR_USEPOLLING: true
      NODE_ENV: development
      DATABASE_HOST: clients-db
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${CLIENTS_DB}
      DATABASE_PORT: 5432
    depends_on:
      - clients-db
    networks:
      - app-network
    restart: on-failure

  # Kafka de Bitnami
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - app-network

  # Servicio Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "100"
      NODE_ENV: "development"
      REACT_APP_USERS_SERVICE_URL: ${REACT_APP_USERS_SERVICE_URL}
      REACT_APP_ADMINS_SERVICE_URL: ${REACT_APP_ADMINS_SERVICE_URL}
      REACT_APP_CLIENTS_SERVICE_URL: ${REACT_APP_CLIENTS_SERVICE_URL}
      REACT_APP_GOOGLE_MAPS_API: ${REACT_APP_GOOGLE_MAPS_API}
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - users-service
      - admins-service
      - clients-service
    networks:
      - app-network
    stdin_open: true
    tty: true
    command: ["npm", "start"]

volumes:
  users-db-data:
  admins-db-data:
  clients-db-data:

networks:
  app-network:
    driver: bridge
